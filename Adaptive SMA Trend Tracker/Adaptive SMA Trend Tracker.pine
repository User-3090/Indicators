// MIT License
//
// Copyright (c) 2024 User-3090
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//@version=6
indicator("Adaptive SMA Trend Tracker", overlay=true)

// ═══════════════════════════════════════════════════════════════════════════════
// CONSTANTS & CONFIGURATION
// ═══════════════════════════════════════════════════════════════════════════════

const int MAX_BARS            = 5000
const int SCAN_WINDOW         = 10    // Rolling window: keep last N days
const int MIN_DAYS_FOR_SCAN   = 2     // Minimum days needed before using scanned data
const int MIN_BARS_TOTAL      = 6     // Minimum bars to start scanning (works on 4-hour+ timeframes)
const int MIN_BARS_PER_DAY    = 1     // Minimum bars per day (filters holidays, allows multi-hour timeframes)
const int MAX_BARS_PER_DAY    = 3000  // Maximum bars per day (supports 30-second charts on 24h markets)
const int SECONDS_STOCK_DAY   = 23400 // 6.5 hours (stock market RTH)
const int SECONDS_FOREX_DAY   = 86400 // 24 hours (forex trading, 5 days/week)
const int SECONDS_FUTURES_DAY = 82800 // 23 hours (typical futures trading)
const int SECONDS_CRYPTO_DAY  = 86400 // 24 hours (crypto trading)

max_bars_back(close, MAX_BARS)

// SMA Colors - Daily
const color COL_SMA5   = #fbbe30  // Yellow - 5-day
const color COL_SMA20  = #f47b00  // Orange - 20-day
const color COL_SMA50  = #d62060  // Pink - 50-day
const color COL_SMA200 = #e43b38  // Red - 200-day

// SMA Colors - Weekly (default to match 20-day, 50-day, 200-day)
const color COL_SMA20W = #f47b00  // Orange - 20-week
const color COL_SMA31W = #d62060  // Pink - 31-week
const color COL_SMA42W = #e43b38  // Red - 42-week

// Shading Colors
const color COL_SHADE_BULLISH    = color.new(#81ce6f, 90) // Green
const color COL_SHADE_BEARISH    = color.new(#e43b38, 90) // Red
const color COL_SHADE_TRANSITION = color.new(#fbbe30, 90) // Yellow

// Inputs
// Start Lines
show5StartLineInput = input.bool(true, "Show 5-Day", inline="5", group="Start Lines")
startLineStyle5Input = input.string("Dashed", "Style",
     options=["Solid", "Dashed", "Dotted"], inline="5", group="Start Lines")

show50StartLineInput = input.bool(false, "Show 50-Day", inline="50", group="Start Lines")
startLineStyle50Input = input.string("Dashed", "Style",
     options=["Solid", "Dashed", "Dotted"], inline="50", group="Start Lines")

show200StartLineInput = input.bool(false, "Show 200-Day", inline="200", group="Start Lines")
startLineStyle200Input = input.string("Dashed", "Style",
     options=["Solid", "Dashed", "Dotted"], inline="200", group="Start Lines")

// Info Bar Display
showInfoBar = input.bool(false, "Show Info Bar", group="Info Bar")
infoBarPosition = input.string("Top Right", "Position",
     options=["Top Left", "Top Right", "Bottom Left", "Bottom Right"],
     group="Info Bar")
infoBarBgColor = input.color(color.gray, "Background Color", group="Info Bar")
infoBarTextColor = input.color(color.white, "Text Color", group="Info Bar")
infoBarTextSize = input.string("Normal", "Text Size",
     options=["Auto", "Tiny", "Small", "Normal", "Large", "Huge"],
     group="Info Bar")

// ATR Settings
showATR = input.bool(true, "Show ATR", group="ATR Settings")
atrPeriod = input.int(20, "ATR Period (Days)", minval=1, maxval=500, group="ATR Settings", tooltip="Number of days used to calculate Average True Range")
riskAmount = input.float(2000, "ATR Position Size", minval=0, step=100, group="ATR Settings", tooltip="Currency value of 1 ATR price move (up or down). Calculates shares/lots based on volatility.")

// Earnings Settings
showEarnings = input.bool(false, "Show Last Earnings", group="Earnings Settings", tooltip="Display days since last earnings report (stocks only)")

// ═══════════════════════════════════════════════════════════════════════════════
// ADAPTIVE BARS PER DAY CALCULATION
// ═══════════════════════════════════════════════════════════════════════════════
isWeekly = timeframe.isweekly

// Initial fallback: detect instrument type and use appropriate hours
int theoreticalSeconds = syminfo.type == "futures" ? SECONDS_FUTURES_DAY :
     syminfo.type == "crypto" ? SECONDS_CRYPTO_DAY :
     syminfo.type == "forex" ? SECONDS_FOREX_DAY :
     SECONDS_STOCK_DAY
float theoreticalBarsPerDay = timeframe.isintraday ? math.round(theoreticalSeconds / timeframe.in_seconds()) : 1.0
var float barsPerDay = theoreticalBarsPerDay
var array<int> barCountsPerDay = array.new<int>()
var int dayStartBar = na
bool hasEnoughData = bar_index >= MIN_BARS_TOTAL

// Scan trading days and adapt to session changes
if timeframe.change("D") and barstate.isconfirmed and not isWeekly and hasEnoughData
    if not na(dayStartBar)
        int barsInDay = bar_index - dayStartBar

        // Filter holidays, data gaps, corrupt data
        if barsInDay >= MIN_BARS_PER_DAY and barsInDay <= MAX_BARS_PER_DAY
            array.push(barCountsPerDay, barsInDay)

            // Maintain rolling window
            if array.size(barCountsPerDay) > SCAN_WINDOW
                array.shift(barCountsPerDay)

    dayStartBar := bar_index

    // Use mode of last N days
    if array.size(barCountsPerDay) >= MIN_DAYS_FOR_SCAN
        barsPerDay := array.mode(barCountsPerDay)

// ═══════════════════════════════════════════════════════════════════════════════
// SMA CALCULATIONS
// ═══════════════════════════════════════════════════════════════════════════════

// Calculate SMA periods based on actual bars per day
len5   = int(5 * barsPerDay)
len20  = int(20 * barsPerDay)
len50  = int(50 * barsPerDay)
len200 = int(200 * barsPerDay)

canShow5   = len5 > 0 and len5 <= MAX_BARS
canShow20  = len20 > 0 and len20 <= MAX_BARS
canShow50  = len50 > 0 and len50 <= MAX_BARS
canShow200 = len200 > 0 and len200 <= MAX_BARS

// Calculate SMAs unconditionally (Pine Script requirement), use guards for display
sma5   = ta.sma(close, canShow5 ? math.min(len5, MAX_BARS) : 1)
sma20  = ta.sma(close, canShow20 ? math.min(len20, MAX_BARS) : 1)
sma50  = ta.sma(close, canShow50 ? math.min(len50, MAX_BARS) : 1)
sma200 = ta.sma(close, canShow200 ? math.min(len200, MAX_BARS) : 1)

sma20w = ta.sma(close, 20)
sma31w = ta.sma(close, 31)
sma42w = ta.sma(close, 42)

// ═══════════════════════════════════════════════════════════════════════════════
// ATR & POSITION SIZE CALCULATION
// ═══════════════════════════════════════════════════════════════════════════════

// Currency symbol formatter
getCurrencySymbol(string curr) =>
    string _result = curr == "USD" ? "$" :
         curr == "EUR" ? "€" :
         curr == "GBP" ? "£" :
         curr == "JPY" ? "¥" :
         curr == "CNY" ? "¥" :
         curr == "CHF" ? "CHF " :
         curr == "AUD" ? "A$" :
         curr == "CAD" ? "C$" :
         curr == "NZD" ? "NZ$" :
         curr == "HKD" ? "HK$" :
         curr == "SGD" ? "S$" :
         curr == "KRW" ? "₩" :
         curr == "INR" ? "₹" :
         curr == "RUB" ? "₽" :
         curr == "BRL" ? "R$" :
         curr == "ZAR" ? "R" :
         curr == "TRY" ? "₺" :
         curr + " "
    _result

atrValue = request.security(syminfo.tickerid, "D", ta.atr(atrPeriod))
atrPercent = not na(atrValue) and atrValue > 0 and close > 0 ? (atrValue / close) * 100 : 0

// Earnings calculation (stocks only) - must be at root scope for consistency
isStock = syminfo.type == "stock"
earningsActual = isStock ? request.earnings(syminfo.tickerid, earnings.actual, barmerge.gaps_on, ignore_invalid_symbol=true) : na
barsSinceEarnings = ta.barssince(not na(earningsActual))
daysSinceEarnings = showEarnings and isStock and not na(barsSinceEarnings) ? int(barsSinceEarnings) : 0

isFutures = syminfo.type == "futures"
calculatedShares = 0.0
calculatedLots = 0.0
capitalAmount = 0.0

if riskAmount > 0 and not na(atrValue) and atrValue > 0
    if isFutures and not na(syminfo.pointvalue) and syminfo.pointvalue > 0
        calculatedLots := riskAmount / (atrValue * syminfo.pointvalue)
        // Notional value for futures = lots × price × point value
        capitalAmount := calculatedLots * close * syminfo.pointvalue
    else if not isFutures
        calculatedShares := riskAmount / atrValue
        // Capital for stocks = shares × price
        capitalAmount := calculatedShares * close

// ═══════════════════════════════════════════════════════════════════════════════
// SHADING LOGIC
// ═══════════════════════════════════════════════════════════════════════════════

priceAbove = close > sma5
smaUp = sma5 > sma5[1]
canShade = timeframe.isintraday and not isWeekly and canShow5 and bar_index >= len5 - 1 and not na(sma5[1])

smaColor = canShade ?
     (priceAbove and smaUp ? COL_SHADE_BULLISH :
      not priceAbove and not smaUp ? COL_SHADE_BEARISH :
      COL_SHADE_TRANSITION) : na

// ═══════════════════════════════════════════════════════════════════════════════
// PLOTS - DAILY SMAs (SMALLEST TO LARGEST)
// ═══════════════════════════════════════════════════════════════════════════════

show5   = not isWeekly and timeframe.isintraday and canShow5 and bar_index >= len5 - 1
show20  = not isWeekly and canShow20 and bar_index >= len20 - 1
show50  = not isWeekly and canShow50 and bar_index >= len50 - 1
show200 = not isWeekly and canShow200 and bar_index >= len200 - 1

p5   = plot(show5 ? sma5 : na, "5-Day SMA", COL_SMA5, 2)
p20  = plot(show20 ? sma20 : na, "20-Day SMA", COL_SMA20, 2)
p50  = plot(show50 ? sma50 : na, "50-Day SMA", COL_SMA50, 2)
p200 = plot(show200 ? sma200 : na, "200-Day SMA", COL_SMA200, 2)

// ═══════════════════════════════════════════════════════════════════════════════
// PLOTS - WEEKLY SMAs (SMALLEST TO LARGEST)
// ═══════════════════════════════════════════════════════════════════════════════

plot(isWeekly and bar_index >= 19 ? sma20w : na, "20-Week SMA", COL_SMA20W, 2)
plot(isWeekly and bar_index >= 30 ? sma31w : na, "31-Week SMA", COL_SMA31W, 2)
plot(isWeekly and bar_index >= 41 ? sma42w : na, "42-Week SMA", COL_SMA42W, 2)

// ═══════════════════════════════════════════════════════════════════════════════
// SHADING & START LINES
// ═══════════════════════════════════════════════════════════════════════════════

pClose = plot(close, display=display.none, editable=false)
fill(pClose, p5, smaColor, title="5-Day SMA Shading")

getLineStyle(s) => s == "Solid" ? line.style_solid : s == "Dotted" ? line.style_dotted : line.style_dashed

var line startLine5 = na
if barstate.islast and show5 and show5StartLineInput and na(startLine5)
    startBar = bar_index - len5 + 1
    if startBar >= 0
        startLine5 := line.new(startBar, low[len5 - 1], startBar, high[len5 - 1],
             extend=extend.both, color=COL_SMA5, style=getLineStyle(startLineStyle5Input), width=2)

var line startLine50 = na
if barstate.islast and show50 and show50StartLineInput and na(startLine50)
    startBar = bar_index - len50 + 1
    if startBar >= 0
        startLine50 := line.new(startBar, low[len50 - 1], startBar, high[len50 - 1],
             extend=extend.both, color=COL_SMA50, style=getLineStyle(startLineStyle50Input), width=2)

var line startLine200 = na
if barstate.islast and show200 and show200StartLineInput and na(startLine200)
    startBar = bar_index - len200 + 1
    if startBar >= 0
        startLine200 := line.new(startBar, low[len200 - 1], startBar, high[len200 - 1],
             extend=extend.both, color=COL_SMA200, style=getLineStyle(startLineStyle200Input), width=2)

// ═══════════════════════════════════════════════════════════════════════════════
// INFO BAR DISPLAY
// ═══════════════════════════════════════════════════════════════════════════════

if showInfoBar and barstate.islast
    pos = infoBarPosition == "Top Left" ? position.top_left :
          infoBarPosition == "Top Right" ? position.top_right :
          infoBarPosition == "Bottom Left" ? position.bottom_left :
          position.bottom_right

    txtSize = infoBarTextSize == "Auto" ? size.auto :
              infoBarTextSize == "Tiny" ? size.tiny :
              infoBarTextSize == "Small" ? size.small :
              infoBarTextSize == "Normal" ? size.normal :
              infoBarTextSize == "Large" ? size.large :
              size.huge

    var table infoTable = table.new(pos, 1, 1, frame_width = 1, frame_color = color.gray)

    table.clear(infoTable, 0, 0, 0, 0)

    // Build single line text
    string infoText = ""

    // Add ATR info
    if showATR
        string atrText = not na(atrValue) and atrValue > 0 ?
             "ATR(" + str.tostring(atrPeriod) + "): " + str.tostring(atrPercent, "0.0") + "%" :
             "ATR(" + str.tostring(atrPeriod) + "): N/A"

        if riskAmount > 0 and not na(atrValue) and atrValue > 0
            currSymbol = getCurrencySymbol(syminfo.currency)
            positionText = isFutures and calculatedLots > 0 ?
                 str.tostring(calculatedLots, "0.0") + " lots (" + currSymbol + str.tostring(capitalAmount, "#,###") + ")" :
                 not isFutures and calculatedShares > 0 ?
                 str.tostring(math.round(calculatedShares), "#,###") + " shares (" + currSymbol + str.tostring(capitalAmount, "#,###") + ")" :
                 "N/A"
            atrText := atrText + " | 1 ATR = " + currSymbol + str.tostring(riskAmount, "#,###") + " → " + positionText

        infoText := atrText

    // Append earnings info
    if showEarnings and isStock
        string earningsText = daysSinceEarnings > 0 ?
             "Last Earnings: " + str.tostring(daysSinceEarnings) + " days ago" :
             "Last Earnings: N/A"
        infoText := infoText == "" ? earningsText : infoText + " | " + earningsText

    // Display single row
    if infoText != ""
        table.cell(infoTable, 0, 0, infoText, text_color = infoBarTextColor, bgcolor = infoBarBgColor, text_size = txtSize)
